datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tasks {
  id          String   @unique @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  deadline    DateTime
  label       Labels?  @relation(fields: [labelsId], references: [id])
  priority    Priority @default(LOW)
  status      Status   @default(TODO)
  labelsId    Int?
}

model Labels {
  id        Int      @unique @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  Tasks     Tasks[]
}

enum Status {
  TODO
  PENDING
  COMPLETED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}
